name: Adaptive training CI

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master

env:
  PROJECT_ARTIFACT_ID: kypo-adaptive-training
  DEPLOYMENT_INFO_VERSION_FILE: VERSION.txt
  MAVEN_CLI_OPTS: "-Dmaven.repo.local=$GITHUB_WORKSPACE/.m2/repository"
  TRUSTED_HOST: gitlab.ics.muni.cz
  GIT_CLONE_URL: "git@${{ github.server_url }}:${{ github.repository }}.git"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project
        run: mvn clean install $MAVEN_CLI_OPTS -DskipTests -Dproprietary-repo-url=${{ vars.PROPRIETARY_REPO_URL }}
        if: github.ref == 'refs/heads/master'

  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn test $MAVEN_CLI_OPTS -Dproprietary-repo-url=${{ vars.PROPRIETARY_REPO_URL }}
        if: github.ref == 'refs/heads/master'

  create_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up git
        run: |
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"

      - name: Create and push tag
        run: |
          TAG_VERSION=$(cat $DEPLOYMENT_INFO_VERSION_FILE)
          git tag $TAG_VERSION
          git push origin $TAG_VERSION
        if: github.ref == 'refs/heads/master'

  generate_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Generate and Push Swagger Docs
        run: |
          mvn clean package $MAVEN_CLI_OPTS -DskipTests -Dswagger.skip=false -Dproprietary-repo-url=${{ vars.PROPRIETARY_REPO_URL }}
          ls -la
        if: github.ref == 'refs/heads/master'

      - name: Upload Docs Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.repository }}-docs
          path: doc-files/kypo-adaptive-training-swagger-open-api.yaml

  docker_image_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login $CI_REGISTRY --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          export CI_CUSTOM_REGISTRY_IMAGE="${{ secrets.DOCKER_REGISTRY }}/$CI_CUSTOM_IMAGE_NAME"
          docker build -t $CI_CUSTOM_REGISTRY_IMAGE:$GITHUB_REF .
          docker push $CI_CUSTOM_REGISTRY_IMAGE:$GITHUB_REF
        if: startsWith(github.ref, 'refs/tags/')

  docker_image_push_development:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login $CI_REGISTRY --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image for Development
        run: |
          export CI_CUSTOM_REGISTRY_IMAGE="${{ secrets.DOCKER_REGISTRY }}/$CI_CUSTOM_IMAGE_NAME"
          docker build -t $CI_CUSTOM_REGISTRY_IMAGE:develop .
          docker push $CI_CUSTOM_REGISTRY_IMAGE:develop
        if: github.ref == 'refs/heads/develop'
